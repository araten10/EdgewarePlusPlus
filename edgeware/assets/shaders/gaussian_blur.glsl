// Copyright (C) 2025 Araten & Marigold
//
// This file is part of Edgeware++.
//
// Edgeware++ is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Edgeware++ is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Edgeware++.  If not, see <https://www.gnu.org/licenses/>.

//!HOOK NATIVE
//!BIND HOOKED

#define RADIUS 32

vec4 hook()
{
    float[RADIUS] kernel = {0.02621708776682088, 0.026165932489863288, 0.026013064771182867, 0.02576026730719446, 0.025410472774785996, 0.02496770720312731, 0.024437012849862223, 0.023824352647190995, 0.023136498749007917, 0.02238090808984603, 0.02156558814842337, 0.020698956285595062, 0.019789696095217947, 0.01884661416778669, 0.01787850052572912, 0.016893995754691932, 0.01590146753895388, 0.014908898925792934, 0.01392379020958036, 0.012953075859029831, 0.012003057428145067, 0.011079352910279745, 0.01018686253150323, 0.009329750548572286, 0.008511442230448807, 0.007734634870125988, 0.007001321402419632, 0.006312824997409965, 0.005669842859685316, 0.005072497389167494, 0.004520392846520297, 0.004012675709449621};

    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
    for (int i = -RADIUS + 1; i < RADIUS; i++)
    {
        color.rgb += HOOKED_texOff(vec2(i, 0)).rgb * kernel[abs(i)];
    }
    return color;
}

//!HOOK NATIVE
//!BIND HOOKED

#define RADIUS 32

vec4 hook()
{
    float[RADIUS] kernel = {0.02621708776682088, 0.026165932489863288, 0.026013064771182867, 0.02576026730719446, 0.025410472774785996, 0.02496770720312731, 0.024437012849862223, 0.023824352647190995, 0.023136498749007917, 0.02238090808984603, 0.02156558814842337, 0.020698956285595062, 0.019789696095217947, 0.01884661416778669, 0.01787850052572912, 0.016893995754691932, 0.01590146753895388, 0.014908898925792934, 0.01392379020958036, 0.012953075859029831, 0.012003057428145067, 0.011079352910279745, 0.01018686253150323, 0.009329750548572286, 0.008511442230448807, 0.007734634870125988, 0.007001321402419632, 0.006312824997409965, 0.005669842859685316, 0.005072497389167494, 0.004520392846520297, 0.004012675709449621};

    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
    for (int i = -RADIUS + 1; i < RADIUS; i++)
    {
        color.rgb += HOOKED_texOff(vec2(0, i)).rgb * kernel[abs(i)];
    }
    return color;
}
